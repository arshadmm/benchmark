============================= test session starts =============================
platform win32 -- Python 3.7.4, pytest-5.3.1, py-1.8.0, pluggy-0.13.1 -- c:\users\brian\env3\scripts\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Brian\ENV3\cm\cloudmesh-cloud, inifile: pytest.ini
collecting ... collected 51 items

tests/aws/test_cloud_aws.py::TestCloudAws::test_create 
[35m
# ######################################################################
# test_create \tests\aws\test_cloud_aws.py 34
# ######################################################################
[0m
FAILED
tests/aws/test_cloud_aws.py::TestCloudAws::test_list 
[35m
# ######################################################################
# test_list \tests\aws\test_cloud_aws.py 39
# ######################################################################
[0m
PASSED
tests/aws/test_cloud_aws.py::TestCloudAws::test__info 
[35m
# ######################################################################
# test__info \tests\aws\test_cloud_aws.py 44
# ######################################################################
[0m
PASSED
tests/aws/test_cloud_aws.py::TestCloudAws::test_suspend 
[35m
# ######################################################################
# test_suspend \tests\aws\test_cloud_aws.py 49
# ######################################################################
[0m
FAILED
tests/aws/test_cloud_aws.py::TestCloudAws::test_stop 
[35m
# ######################################################################
# test_stop \tests\aws\test_cloud_aws.py 55
# ######################################################################
[0m
ec2.instancesCollection(ec2.ServiceResource(), ec2.Instance)
FAILED
tests/aws/test_cloud_aws.py::TestCloudAws::test_start 
[35m
# ######################################################################
# test_start \tests\aws\test_cloud_aws.py 61
# ######################################################################
[0m
ec2.instancesCollection(ec2.ServiceResource(), ec2.Instance)
FAILED
tests/aws/test_cloud_aws.py::TestCloudAws::test_destroy 
[35m
# ######################################################################
# test_destroy \tests\aws\test_cloud_aws.py 67
# ######################################################################
[0m
ec2.instancesCollection(ec2.ServiceResource(), ec2.Instance)
PASSED
tests/aws/test_cloud_aws.py::TestCloudAws::test_list_sizes 
[35m
# ######################################################################
# test_list_sizes \tests\aws\test_cloud_aws.py 71
# ######################################################################
[0m
FAILED
tests/aws/test_cloud_aws.py::TestCloudAws::test_benchmark 
+----------------------+------+---------------------+-----+----------------------+------+---------+-------------+---------------------------------+
| timer                | time | start               | tag | node                 | user | system  | mac_version | win_version                     |
+----------------------+------+---------------------+-----+----------------------+------+---------+-------------+---------------------------------+
| benchmark_start_stop | 0.0  | 2019-12-23 12:58:22 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
+----------------------+------+---------------------+-----+----------------------+------+---------+-------------+---------------------------------+

csv,timer,time,starttag,node,user,system,mac_version,win_version
#csv,benchmark_start_stop,0.0,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')

PASSED
tests/aws/test_cms_aws.py::TestCmsAWS::test_01_boot 
[35m
# ######################################################################
# test_01_boot \tests\aws\test_cms_aws.py 29
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 40:test_01_boot .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('# ----------------------------------------------------------------------\r\n'
#  '# boot\r\n'
#  '# ----------------------------------------------------------------------\r\n'
#  '\r\n'
#  "{'flavor': 't2.micro',\r\n"
#  " 'group': 'cloudmesh',\r\n"
#  " 'image': 'ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212',\r\n"
#  " 'key': 'aws_cert',\r\n"
#  " 'name': 'test_boot_01',\r\n"
#  " 'secgroup': 'default',\r\n"
#  " 'username': 'root'}\r\n"
#  'Dryrun boot test_boot_01: \r\n'
#  '        cloud=aws\r\n'
#  "        names=['test_boot_01']\r\n"
#  '        provide=<cloudmesh.compute.vm.Provider.Provider object at '
#  '0x00000191346B4FC8>\r\n'
#  '\r\n'
#  '        group=cloudmesh\r\n'
#  '        '
#  'image=ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212\r\n'
#  '        username=root\r\n'
#  '        flavor=t2.micro\r\n'
#  '        key=aws_cert\r\n'
#  '        secgroup=default\r\n'
#  '        name=test_boot_01')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_02_boot 
[35m
# ######################################################################
# test_02_boot \tests\aws\test_cms_aws.py 49
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 60:test_02_boot .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('# ----------------------------------------------------------------------\r\n'
#  '# boot\r\n'
#  '# ----------------------------------------------------------------------\r\n'
#  '\r\n'
#  "{'flavor': 't2.micro',\r\n"
#  " 'group': 'cloudmesh',\r\n"
#  " 'image': 'ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212',\r\n"
#  " 'key': 'aws_cert',\r\n"
#  " 'name': 'brfunk-vm',\r\n"
#  " 'secgroup': 'default',\r\n"
#  " 'username': 'root'}\r\n"
#  'Dryrun boot brfunk-vm: \r\n'
#  '        cloud=aws\r\n'
#  "        names=['brfunk-vm', 'brfunk-vm']\r\n"
#  '        provide=<cloudmesh.compute.vm.Provider.Provider object at '
#  '0x0000028216E2B208>\r\n'
#  '\r\n'
#  '        group=cloudmesh\r\n'
#  '        '
#  'image=ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212\r\n'
#  '        username=root\r\n'
#  '        flavor=t2.micro\r\n'
#  '        key=aws_cert\r\n'
#  '        secgroup=default\r\n'
#  '        name=brfunk-vm\r\n'
#  '\r\n'
#  '# ----------------------------------------------------------------------\r\n'
#  '# boot\r\n'
#  '# ----------------------------------------------------------------------\r\n'
#  '\r\n'
#  "{'flavor': 't2.micro',\r\n"
#  " 'group': 'cloudmesh',\r\n"
#  " 'image': 'ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212',\r\n"
#  " 'key': 'aws_cert',\r\n"
#  " 'name': 'brfunk-vm',\r\n"
#  " 'secgroup': 'default',\r\n"
#  " 'username': 'root'}\r\n"
#  'Dryrun boot brfunk-vm: \r\n'
#  '        cloud=aws\r\n'
#  "        names=['brfunk-vm', 'brfunk-vm']\r\n"
#  '        provide=<cloudmesh.compute.vm.Provider.Provider object at '
#  '0x0000028216E2B208>\r\n'
#  '\r\n'
#  '        group=cloudmesh\r\n'
#  '        '
#  'image=ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212\r\n'
#  '        username=root\r\n'
#  '        flavor=t2.micro\r\n'
#  '        key=aws_cert\r\n'
#  '        secgroup=default\r\n'
#  '        name=brfunk-vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_03_boot 
[35m
# ######################################################################
# test_03_boot \tests\aws\test_cms_aws.py 69
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 81:test_03_boot .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('# ----------------------------------------------------------------------\r\n'
#  '# Create Server\r\n'
#  '# ----------------------------------------------------------------------\r\n'
#  '\r\n'
#  '    Name:     test_boot_01\r\n'
#  '    User:     None\r\n'
#  '    IP:       None\r\n'
#  '    Image:    '
#  'ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212\r\n'
#  '    Size:     t2.micro\r\n'
#  '    Public:   None\r\n'
#  '    Key:      aws_cert\r\n'
#  '    Location: None\r\n'
#  '    Timeout:  360\r\n'
#  '    Secgroup: default\r\n'
#  '    Group:    cloudmesh\r\n'
#  '\r\n'
#  'ERROR: create problem\r\n'
#  '\r\n'
#  'Trace:\r\n'
#  'Traceback (most recent call last):\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\vm\\command\\vm.py", '
#  'line 720, in do_vm\r\n'
#  '        vms = provider.create(**parameters)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\mongo\\DataBaseDecorator.py", '
#  'line 87, in wrapper\r\n'
#  '        current = f(*args, **kwargs)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\vm\\Provider.py", '
#  'line 216, in create\r\n'
#  '        created = self.loop(self._create, **arguments)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\vm\\Provider.py", '
#  'line 112, in loop\r\n'
#  '        vm = func(**parameters)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\vm\\Provider.py", '
#  'line 251, in _create\r\n'
#  '        data = self.p.create(**arguments)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\aws\\Provider.py", '
#  'line 1116, in create\r\n'
#  "        'Tags': metadata}]\r\n"
#  '      File '
#  '"c:\\users\\brian\\env3\\lib\\site-packages\\boto3\\resources\\factory.py", '
#  'line 520, in do_action\r\n'
#  '        response = action(self, *args, **kwargs)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\lib\\site-packages\\boto3\\resources\\action.py", '
#  'line 83, in __call__\r\n'
#  '        response = getattr(parent.meta.client, operation_name)(**params)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\lib\\site-packages\\botocore\\client.py", line 357, '
#  'in _api_call\r\n'
#  '        return self._make_api_call(operation_name, kwargs)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\lib\\site-packages\\botocore\\client.py", line 661, '
#  'in _make_api_call\r\n'
#  '        raise error_class(parsed_response, operation_name)\r\n'
#  '    botocore.exceptions.ClientError: An error occurred '
#  '(InvalidAMIID.Malformed) when calling the RunInstances operation: Invalid '
#  'id: "ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212" '
#  '(expecting "ami-...")\r\n'
#  '\r\n'
#  'An error occurred (InvalidAMIID.Malformed) when calling the RunInstances '
#  'operation: Invalid id: '
#  '"ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212" (expecting '
#  '"ami-...")')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_04_boot 
[35m
# ######################################################################
# test_04_boot \tests\aws\test_cms_aws.py 91
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 102:test_04_boot .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('# ----------------------------------------------------------------------\r\n'
#  '# Create Server\r\n'
#  '# ----------------------------------------------------------------------\r\n'
#  '\r\n'
#  '    Name:     brfunk-vm\r\n'
#  '    User:     None\r\n'
#  '    IP:       None\r\n'
#  '    Image:    '
#  'ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212\r\n'
#  '    Size:     t2.micro\r\n'
#  '    Public:   None\r\n'
#  '    Key:      aws_cert\r\n'
#  '    Location: None\r\n'
#  '    Timeout:  360\r\n'
#  '    Secgroup: default\r\n'
#  '    Group:    cloudmesh\r\n'
#  '\r\n'
#  'ERROR: create problem\r\n'
#  '\r\n'
#  'Trace:\r\n'
#  'Traceback (most recent call last):\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\vm\\command\\vm.py", '
#  'line 720, in do_vm\r\n'
#  '        vms = provider.create(**parameters)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\mongo\\DataBaseDecorator.py", '
#  'line 87, in wrapper\r\n'
#  '        current = f(*args, **kwargs)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\vm\\Provider.py", '
#  'line 216, in create\r\n'
#  '        created = self.loop(self._create, **arguments)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\vm\\Provider.py", '
#  'line 112, in loop\r\n'
#  '        vm = func(**parameters)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\vm\\Provider.py", '
#  'line 251, in _create\r\n'
#  '        data = self.p.create(**arguments)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\aws\\Provider.py", '
#  'line 1116, in create\r\n'
#  "        'Tags': metadata}]\r\n"
#  '      File '
#  '"c:\\users\\brian\\env3\\lib\\site-packages\\boto3\\resources\\factory.py", '
#  'line 520, in do_action\r\n'
#  '        response = action(self, *args, **kwargs)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\lib\\site-packages\\boto3\\resources\\action.py", '
#  'line 83, in __call__\r\n'
#  '        response = getattr(parent.meta.client, operation_name)(**params)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\lib\\site-packages\\botocore\\client.py", line 357, '
#  'in _api_call\r\n'
#  '        return self._make_api_call(operation_name, kwargs)\r\n'
#  '      File '
#  '"c:\\users\\brian\\env3\\lib\\site-packages\\botocore\\client.py", line 661, '
#  'in _make_api_call\r\n'
#  '        raise error_class(parsed_response, operation_name)\r\n'
#  '    botocore.exceptions.ClientError: An error occurred '
#  '(InvalidAMIID.Malformed) when calling the RunInstances operation: Invalid '
#  'id: "ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212" '
#  '(expecting "ami-...")\r\n'
#  '\r\n'
#  'An error occurred (InvalidAMIID.Malformed) when calling the RunInstances '
#  'operation: Invalid id: '
#  '"ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212" (expecting '
#  '"ami-...")')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_list 
[35m
# ######################################################################
# test_list \tests\aws\test_cms_aws.py 112
# ######################################################################
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_status 
[35m
# ######################################################################
# please patiently wait for vm to boot and proceed with other tests
#  test_status \tests\aws\test_cms_aws.py 127
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 140:test_status .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('aws\r\n'
#  "ERROR: executing command 'vm status test_boot_01 --cloud=aws'\r\n"
#  '======================================================================\r\n'
#  "'status'\r\n"
#  "'status'\r\n"
#  'Traceback (most recent call last):\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cmd5\\cloudmesh\\shell\\shell.py", '
#  'line 985, in main\r\n'
#  '    stop = cmd.onecmd(command)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cmd5\\cloudmesh\\shell\\shell.py", '
#  'line 375, in onecmd\r\n'
#  '    return func(arg)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cmd5\\cloudmesh\\shell\\command.py", '
#  'line 104, in new\r\n'
#  '    func(instance, args, arguments)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\vm\\command\\vm.py", '
#  'line 487, in do_vm\r\n'
#  '    provider.Print(status, output=arguments.output, kind="status")\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\vm\\Provider.py", '
#  'line 390, in Print\r\n'
#  "    order = self.p.output[kind]['order']  # not pretty\r\n"
#  "KeyError: 'status'\r\n"
#  '\r\n'
#  '======================================================================')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_01_stop 
[35m
# ######################################################################
# test_01_stop \tests\aws\test_cms_aws.py 144
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 153:test_01_stop .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_02_stop 
[35m
# ######################################################################
# test_02_stop \tests\aws\test_cms_aws.py 159
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 168:test_02_stop .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_03_stop 
[35m
# ######################################################################
# test_03_stop \tests\aws\test_cms_aws.py 174
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 182:test_03_stop .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_ping 
[35m
# ######################################################################
# test_ping \tests\aws\test_cms_aws.py 186
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 195:test_ping .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_check 
[35m
# ######################################################################
# test_check \tests\aws\test_cms_aws.py 200
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 209:test_check .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_01_run 
[35m
# ######################################################################
# test_01_run \tests\aws\test_cms_aws.py 213
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 222:test_01_run .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_01_script 
[35m
# ######################################################################
# test_01_script \tests\aws\test_cms_aws.py 237
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 251:test_01_script .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ("ERROR: executing command 'vm script --name=test_boot_01 --username=ubuntu "
#  "./test_cms_aws.sh --dryrun'\r\n"
#  '======================================================================\r\n'
#  '\r\n'
#  '\r\n'
#  'Traceback (most recent call last):\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cmd5\\cloudmesh\\shell\\shell.py", '
#  'line 985, in main\r\n'
#  '    stop = cmd.onecmd(command)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cmd5\\cloudmesh\\shell\\shell.py", '
#  'line 375, in onecmd\r\n'
#  '    return func(arg)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cmd5\\cloudmesh\\shell\\command.py", '
#  'line 104, in new\r\n'
#  '    func(instance, args, arguments)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\vm\\command\\vm.py", '
#  'line 826, in do_vm\r\n'
#  '    raise NotImplementedError\r\n'
#  'NotImplementedError\r\n'
#  '\r\n'
#  '======================================================================')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_01_start 
[35m
# ######################################################################
# test_01_start \tests\aws\test_cms_aws.py 266
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 275:test_01_start .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_02_start 
[35m
# ######################################################################
# test_02_start \tests\aws\test_cms_aws.py 281
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 290:test_02_start .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_03_start 
[35m
# ######################################################################
# test_03_start \tests\aws\test_cms_aws.py 296
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 303:test_03_start .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('aws\r\n'
#  "['test_boot_02']\r\n"
#  'ec2.instancesCollection(ec2.ServiceResource(), ec2.Instance)\r\n'
#  'None')
# ----------------------------------------------------------------------
[0m
PASSED
tests/aws/test_cms_aws.py::TestCmsAWS::test_01_terminate 
[35m
# ######################################################################
# test_01_terminate \tests\aws\test_cms_aws.py 307
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 315:test_01_terminate .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ''
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_02_terminate 
[35m
# ######################################################################
# test_02_terminate \tests\aws\test_cms_aws.py 321
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 330:test_02_terminate .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_03_terminate 
[35m
# ######################################################################
# test_03_terminate \tests\aws\test_cms_aws.py 336
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 347:test_03_terminate .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('ec2.instancesCollection(ec2.ServiceResource(), ec2.Instance)\r\n'
#  "'NoneType' object has no attribute 'items'\r\n"
#  'Traceback (most recent call last):\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cmd5\\cloudmesh\\shell\\shell.py", '
#  'line 375, in onecmd\r\n'
#  '    return func(arg)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cmd5\\cloudmesh\\shell\\command.py", '
#  'line 104, in new\r\n'
#  '    func(instance, args, arguments)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\vm\\command\\vm.py", '
#  'line 567, in do_vm\r\n'
#  '    provider.Print(vms, output=arguments.output, kind="vm")\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-cloud\\cloudmesh\\compute\\vm\\Provider.py", '
#  'line 403, in Print\r\n'
#  '    humanize=humanize)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-common\\cloudmesh\\common\\Printer.py", '
#  'line 49, in flatwrite\r\n'
#  '    flat = flatten(table, sep=sep)\r\n'
#  '  File '
#  '"c:\\users\\brian\\env3\\cm\\cloudmesh-common\\cloudmesh\\common\\FlatDict.py", '
#  'line 59, in flatten\r\n'
#  '    for k, v in d.items():\r\n'
#  "AttributeError: 'NoneType' object has no attribute 'items'")
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_01_delete 
[35m
# ######################################################################
# test_01_delete \tests\aws\test_cms_aws.py 351
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 359:test_01_delete .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ''
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_02_delete 
[35m
# ######################################################################
# test_02_delete \tests\aws\test_cms_aws.py 365
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 374:test_02_delete .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ('Usage:\r\n'
#  '\r\n'
#  '    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n'
#  '    vm check [NAMES] [--cloud=CLOUDS] [--username=USERNAME]\r\n'
#  '    vm status [NAMES] [--cloud=CLOUDS] [--output=OUTPUT]\r\n'
#  '    vm console [NAME] [--force]\r\n'
#  '    vm log [NAME] [--force]\r\n'
#  '    vm stop [NAMES]  [--dryrun]\r\n'
#  '    vm start [NAMES] [--dryrun]\r\n'
#  '    vm terminate [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm delete [NAMES] [--cloud=CLOUD] [--dryrun]\r\n'
#  '    vm refresh [--cloud=CLOUDS]\r\n'
#  '    vm list [NAMES]\r\n'
#  '            [--cloud=CLOUDS]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '            [--refresh]\r\n'
#  '    vm boot [--n=COUNT]\r\n'
#  '            [--name=VMNAMES]\r\n'
#  '            [--cloud=CLOUD]\r\n'
#  '            [--username=USERNAME]\r\n'
#  '            [--image=IMAGE]\r\n'
#  '            [--flavor=FLAVOR]\r\n'
#  '            [--public]\r\n'
#  '            [--secgroup=SECGROUPs]\r\n'
#  '            [--group=GROUPs]\r\n'
#  '            [--key=KEY]\r\n'
#  '            [--dryrun]\r\n'
#  '            [-v]\r\n'
#  '    vm meta list [NAME]\r\n'
#  '    vm meta set [NAME] KEY=VALUE...\r\n'
#  '    vm meta delete [NAME] KEY...\r\n'
#  '    vm script [--name=NAMES]\r\n'
#  '              [--username=USERNAME]\r\n'
#  '              [--key=KEY]\r\n'
#  '              [--dryrun]\r\n'
#  '              [--dir=DESTINATION]\r\n'
#  '              SCRIPT\r\n'
#  '    vm ip assign [NAMES]\r\n'
#  '              [--cloud=CLOUD]\r\n'
#  '    vm ip show [NAMES]\r\n'
#  '               [--group=GROUP]\r\n'
#  '               [--cloud=CLOUD]\r\n'
#  '               [--output=OUTPUT]\r\n'
#  '               [--refresh]\r\n'
#  '    vm ip inventory [NAMES]\r\n'
#  '    vm ssh [NAMES]\r\n'
#  '           [--username=USER]\r\n'
#  '           [--quiet]\r\n'
#  '           [--ip=IP]\r\n'
#  '           [--key=KEY]\r\n'
#  '           [--command=COMMAND]\r\n'
#  '    vm put SOURCE DESTINATION [NAMES]\r\n'
#  '    vm get SOURCE DESTINATION [NAMES]\r\n'
#  '    vm rename [OLDNAMES] [NEWNAMES] [--force] [--dryrun]\r\n'
#  '    vm wait [--cloud=CLOUD] [--interval=INTERVAL] [--timeout=TIMEOUT]\r\n'
#  '    vm info [--cloud=CLOUD]\r\n'
#  '            [--output=OUTPUT]\r\n'
#  '    vm username USERNAME [NAMES] [--cloud=CLOUD]\r\n'
#  '    vm resize [NAMES] [--size=SIZE]\r\n'
#  '\r\n'
#  'ERROR: Could not execute the command. Please check usage with\r\n'
#  '\r\n'
#  '    cms help vm')
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_03_delete 
[35m
# ######################################################################
# test_03_delete \tests\aws\test_cms_aws.py 380
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# result
# ----------------------------------------------------------------------
# 391:test_03_delete .\tests\aws\test_cms_aws.py
# ----------------------------------------------------------------------
# ''
# ----------------------------------------------------------------------
[0m
FAILED
tests/aws/test_cms_aws.py::TestCmsAWS::test_benchmark 
+--------------------------------+--------+---------------------+-----+----------------------+------+---------+-------------+---------------------------------+
| timer                          | time   | start               | tag | node                 | user | system  | mac_version | win_version                     |
+--------------------------------+--------+---------------------+-----+----------------------+------+---------+-------------+---------------------------------+
| benchmark_start_stop           | 0.0    | 2019-12-23 13:02:12 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_boot      | 12.909 | 2019-12-23 12:58:22 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_boot      | 10.584 | 2019-12-23 12:58:35 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_boot      | 10.868 | 2019-12-23 12:58:46 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_04_boot      | 8.307  | 2019-12-23 12:58:57 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_list         | 16.986 | 2019-12-23 12:59:05 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_status       | 7.708  | 2019-12-23 12:59:32 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_stop      | 6.95   | 2019-12-23 12:59:39 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_stop      | 7.224  | 2019-12-23 12:59:46 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_stop      | 6.778  | 2019-12-23 12:59:54 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_ping         | 6.716  | 2019-12-23 13:00:00 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_check        | 7.09   | 2019-12-23 13:00:07 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_run       | 6.909  | 2019-12-23 13:00:14 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_script    | 7.676  | 2019-12-23 13:00:21 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_start     | 7.084  | 2019-12-23 13:00:29 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_start     | 6.853  | 2019-12-23 13:00:36 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_start     | 8.689  | 2019-12-23 13:00:43 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_terminate | 10.373 | 2019-12-23 13:00:52 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_terminate | 10.602 | 2019-12-23 13:01:02 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_terminate | 9.394  | 2019-12-23 13:01:25 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_delete    | 8.745  | 2019-12-23 13:01:35 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_delete    | 6.622  | 2019-12-23 13:01:44 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_delete    | 11.986 | 2019-12-23 13:02:00 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
+--------------------------------+--------+---------------------+-----+----------------------+------+---------+-------------+---------------------------------+

csv,timer,time,starttag,node,user,system,mac_version,win_version
#csv,benchmark_start_stop,0.0,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_boot,12.909,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_boot,10.584,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_boot,10.868,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_04_boot,8.307,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_list,16.986,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_status,7.708,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_stop,6.95,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_stop,7.224,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_stop,6.778,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_ping,6.716,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_check,7.09,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_run,6.909,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_script,7.676,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_start,7.084,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_start,6.853,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_start,8.689,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_terminate,10.373,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_terminate,10.602,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_terminate,9.394,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_delete,8.745,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_delete,6.622,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_delete,11.986,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')

PASSED
tests/aws/test_compute_aws-broken.py::TestName::test_list_keys [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_key_upload [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_list_flavors [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_list_secgroups [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_secgroups_add [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_secgroup_rules_add [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_secgroup_rules_remove [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_secgroups_remove [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_create [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_publicip_attach [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_publicip_detach [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_info [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_destroy [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_list_vm [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_vm_login [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_compute_aws-broken.py::TestName::test_benchmark [34m
# ----------------------------------------------------------------------
# setup
# ----------------------------------------------------------------------
[0m
ERROR
tests/aws/test_vafa.py::Test_Vafa::test_aws_aws_list 
[35m
# ######################################################################
# test_aws_aws_list \tests\aws\test_vafa.py 27
# ######################################################################
[0m
[{'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '11/24/2019, 18:26:31', 'updated': '11/24/2019, 18:26:31', 'name': 'TBD-vm-40', 'instance_id': 'i-06e52ff3b2b6ccde6', 'instance_tag': 'TBD-vm-40', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.20.108', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'TBD-vm-40', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '11/24/2019, 18:29:47', 'updated': '11/24/2019, 18:29:47', 'name': 'TBD-vm-41', 'instance_id': 'i-0c17cde2b4585c221', 'instance_tag': 't2.micro', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.28.62', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'TBD-vm-41', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '11/24/2019, 18:35:36', 'updated': '11/24/2019, 18:35:36', 'name': 'TBD-vm-42', 'instance_id': 'i-070a2543014489f6f', 'instance_tag': 'TBD-vm-42', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.17.37', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'TBD-vm-42', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '11/25/2019, 23:27:16', 'updated': '11/25/2019, 23:27:16', 'name': 'TBD-vm-45', 'instance_id': 'i-00f9b0518ecec8029', 'instance_tag': 'ami-06d51e91cea0dac8d', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.30.232', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'TBD-vm-45', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '11/25/2019, 23:23:33', 'updated': '11/25/2019, 23:23:33', 'name': 'TBD-vm-44', 'instance_id': 'i-0666b1f6f085d13ec', 'instance_tag': 'TBD-vm-44', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.27.179', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'TBD-vm-44', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '11/25/2019, 23:28:34', 'updated': '11/25/2019, 23:28:34', 'name': 'TBD-vm-46', 'instance_id': 'i-02dcda9153a038161', 'instance_tag': 't2.micro', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.18.132', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'TBD-vm-46', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '11/28/2019, 01:18:14', 'updated': '11/28/2019, 01:18:14', 'name': 'TBD-vm-47', 'instance_id': 'i-0f8fabcf517613685', 'instance_tag': 'TBD-vm-47', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.21.57', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'TBD-vm-47', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '11/28/2019, 18:37:26', 'updated': '11/28/2019, 18:37:26', 'name': 'brfunk-vm-2', 'instance_id': 'i-0816b0a9f53ace4e7', 'instance_tag': 'brfunk', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.17.16', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-2', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/16/2019, 20:44:31', 'updated': '12/16/2019, 20:44:31', 'name': 'brfunk-vm-3', 'instance_id': 'i-0e987c3aba7f88552', 'instance_tag': 'STOPPED', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.20.148', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-3', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/08/2019, 19:12:44', 'updated': '12/08/2019, 19:12:44', 'name': 'brfunk-vm-10', 'instance_id': 'i-0bf592c3335ceef4e', 'instance_tag': 'brfunk-vm-10', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.30.74', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-10', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/13/2019, 14:55:36', 'updated': '12/13/2019, 14:55:36', 'name': 'brfunk-vm-13', 'instance_id': 'i-0e51fb6c6e7d043c7', 'instance_tag': 't2.micro', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.23.228', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-13', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/13/2019, 14:55:19', 'updated': '12/13/2019, 14:55:19', 'name': 'brfunk-vm-12', 'instance_id': 'i-0021543ecf1e5b09a', 'instance_tag': 'ami-06d51e91cea0dac8d', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.16.89', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-12', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/13/2019, 17:08:54', 'updated': '12/13/2019, 17:08:54', 'name': 'brfunk-vm-2', 'instance_id': 'i-05ac078d7871cf58b', 'instance_tag': 't2.micro', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.25.0', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-2', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/13/2019, 22:22:08', 'updated': '12/13/2019, 22:22:08', 'name': 'brfunk-vm-2', 'instance_id': 'i-03f5fa869c4459849', 'instance_tag': 'brfunk-vm-2', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.23.241', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-2', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/23/2019, 00:30:21', 'updated': '12/23/2019, 00:30:21', 'name': 'brfunk-vm-5', 'instance_id': 'i-09aeb4d6b393a1ec1', 'instance_tag': 'vm', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.31.232', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-5', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/19/2019, 19:42:06', 'updated': '12/19/2019, 19:42:06', 'name': 'brfunk-vm-7', 'instance_id': 'i-0e1da2f4247eee790', 'instance_tag': 'ami-06d51e91cea0dac8d', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.28.250', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-7', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/19/2019, 19:42:33', 'updated': '12/19/2019, 19:42:33', 'name': 'brfunk-vm-8', 'instance_id': 'i-0924f4d646d35fc0c', 'instance_tag': 'vm', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.24.53', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-8', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/19/2019, 20:12:28', 'updated': '12/19/2019, 20:12:28', 'name': 'brfunk-vm-10', 'instance_id': 'i-05c0776a9366f8252', 'instance_tag': 'vm', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.31.3', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-10', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/19/2019, 20:12:47', 'updated': '12/19/2019, 20:12:47', 'name': 'brfunk-vm-11', 'instance_id': 'i-0197d3c0a8412adb1', 'instance_tag': 'brfunk-vm-11', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.23.200', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-11', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/20/2019, 13:05:55', 'updated': '12/20/2019, 13:05:55', 'name': 'brfunk-vm-18', 'instance_id': 'i-0653e368e7ad8538b', 'instance_tag': 't2.micro', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.23.80', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-18', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/20/2019, 13:06:33', 'updated': '12/20/2019, 13:06:33', 'name': 'brfunk-vm-19', 'instance_id': 'i-037fe421d835915f9', 'instance_tag': 'brfunk-vm-19', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.25.39', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm-19', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}, {'kind': 'aws', 'KeyName': 'brfunk', 'status': 'stopped', 'created': '12/23/2019, 00:41:13', 'updated': '12/23/2019, 00:41:13', 'name': 'brfunk-vm', 'instance_id': 'i-0eaabada4193771c5', 'instance_tag': 'brfunk-vm', 'image': 'ami-06d51e91cea0dac8d', 'public_ips': None, 'private_ips': '172.31.17.52', 'cm': {'kind': 'vm', 'driver': 'aws', 'cloud': 'aws', 'name': 'brfunk-vm', 'updated': '2019-12-23 13:02:15.135196', 'created': '2019-12-23 13:02:15.135196'}}]
PASSED
tests/aws/test_vafa.py::Test_Vafa::test_aws_aws_boot 
[35m
# ######################################################################
# test_aws_aws_boot \tests\aws\test_vafa.py 32
# ######################################################################
[0m
[34m
# ----------------------------------------------------------------------
# Create Server
# ----------------------------------------------------------------------
[0m
    Name:     brfunk-vm
    User:     None
    IP:       None
    Image:    ami-0c929bde1796e1484
    Size:     t2.micro
    Public:   None
    Key:      None
    Location: None
    Timeout:  360
    Secgroup: None
    Group:    None

FAILED
tests/aws/test_vafa.py::Test_Vafa::test_benchmark 
+--------------------------------+--------+---------------------+-----+----------------------+------+---------+-------------+---------------------------------+
| timer                          | time   | start               | tag | node                 | user | system  | mac_version | win_version                     |
+--------------------------------+--------+---------------------+-----+----------------------+------+---------+-------------+---------------------------------+
| benchmark_start_stop           | 0.0    | 2019-12-23 13:02:15 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_boot      | 12.909 | 2019-12-23 12:58:22 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_boot      | 10.584 | 2019-12-23 12:58:35 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_boot      | 10.868 | 2019-12-23 12:58:46 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_04_boot      | 8.307  | 2019-12-23 12:58:57 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_list         | 16.986 | 2019-12-23 12:59:05 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_status       | 7.708  | 2019-12-23 12:59:32 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_stop      | 6.95   | 2019-12-23 12:59:39 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_stop      | 7.224  | 2019-12-23 12:59:46 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_stop      | 6.778  | 2019-12-23 12:59:54 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_ping         | 6.716  | 2019-12-23 13:00:00 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_check        | 7.09   | 2019-12-23 13:00:07 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_run       | 6.909  | 2019-12-23 13:00:14 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_script    | 7.676  | 2019-12-23 13:00:21 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_start     | 7.084  | 2019-12-23 13:00:29 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_start     | 6.853  | 2019-12-23 13:00:36 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_start     | 8.689  | 2019-12-23 13:00:43 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_terminate | 10.373 | 2019-12-23 13:00:52 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_terminate | 10.602 | 2019-12-23 13:01:02 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_terminate | 9.394  | 2019-12-23 13:01:25 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_01_delete    | 8.745  | 2019-12-23 13:01:35 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_02_delete    | 6.622  | 2019-12-23 13:01:44 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
| test_cms_aws/test_03_delete    | 11.986 | 2019-12-23 13:02:00 | aws | ('DESKTOP-ENUDKA7',) |      | Windows |             | ('10', '10.0.17134', 'SP0', '') |
+--------------------------------+--------+---------------------+-----+----------------------+------+---------+-------------+---------------------------------+

csv,timer,time,starttag,node,user,system,mac_version,win_version
#csv,benchmark_start_stop,0.0,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_boot,12.909,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_boot,10.584,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_boot,10.868,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_04_boot,8.307,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_list,16.986,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_status,7.708,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_stop,6.95,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_stop,7.224,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_stop,6.778,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_ping,6.716,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_check,7.09,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_run,6.909,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_script,7.676,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_start,7.084,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_start,6.853,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_start,8.689,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_terminate,10.373,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_terminate,10.602,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_terminate,9.394,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_01_delete,8.745,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_02_delete,6.622,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')
#csv,test_cms_aws/test_03_delete,11.986,None,('DESKTOP-ENUDKA7',),,Windows,,('10', '10.0.17134', 'SP0', '')

PASSED

=================================== ERRORS ====================================
__________________ ERROR at setup of TestName.test_list_keys __________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF5BBC8>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
_________________ ERROR at setup of TestName.test_key_upload __________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FEC1BC8>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
________________ ERROR at setup of TestName.test_list_flavors _________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF6E6C8>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
_______________ ERROR at setup of TestName.test_list_secgroups ________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF5D1C8>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
________________ ERROR at setup of TestName.test_secgroups_add ________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FECF308>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
_____________ ERROR at setup of TestName.test_secgroup_rules_add ______________

self = <test_compute_aws-broken.TestName object at 0x000001A02FEFC9C8>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
____________ ERROR at setup of TestName.test_secgroup_rules_remove ____________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF53808>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
______________ ERROR at setup of TestName.test_secgroups_remove _______________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF65508>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
___________________ ERROR at setup of TestName.test_create ____________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FEF0B48>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
_______________ ERROR at setup of TestName.test_publicip_attach _______________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF4C408>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
_______________ ERROR at setup of TestName.test_publicip_detach _______________

self = <test_compute_aws-broken.TestName object at 0x000001A02FEE2A48>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
____________________ ERROR at setup of TestName.test_info _____________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF399C8>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
___________________ ERROR at setup of TestName.test_destroy ___________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF59308>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
___________________ ERROR at setup of TestName.test_list_vm ___________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF610C8>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
__________________ ERROR at setup of TestName.test_vm_login ___________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF07A08>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
__________________ ERROR at setup of TestName.test_benchmark __________________

self = <test_compute_aws-broken.TestName object at 0x000001A02FF04188>

    def setup(self):
        banner("setup", c="-")
        self.user = Config()["cloudmesh.profile.user"]
        self.clouduser = 'cc'
        self.name_generator = Name(
            schema=f"{self.user}-vm",
            counter=1)
    
        self.name = str(self.name_generator)
        self.name_generator.incr()
    
        self.new_name = str(self.name_generator)
    
>       self.p = Provider(name=CLOUD)
E       TypeError: Can't instantiate abstract class Provider with abstract methods delete_server_metadata, get_server_metadata, set_server_metadata, wait

tests\aws\test_compute_aws-broken.py:41: TypeError
================================== FAILURES ===================================
__________________________ TestCloudAws.test_create ___________________________

self = <test_cloud_aws.TestCloudAws object at 0x000001A029F97FC8>

    def test_create(self):
        HEADING()
>       vm = self.provider.create(self.test_node_name)

tests\aws\test_cloud_aws.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

args = (<cloudmesh.compute.vm.Provider.Provider object at 0x000001A029F9BD88>, 'test1')
kwargs = {}

    def wrapper(*args, **kwargs):
>       current = f(*args, **kwargs)
E       TypeError: create() takes 1 positional argument but 2 were given

cloudmesh\mongo\DataBaseDecorator.py:87: TypeError
__________________________ TestCloudAws.test_suspend __________________________

self = <test_cloud_aws.TestCloudAws object at 0x000001A02BA60908>

    def test_suspend(self):
        HEADING()
>       self.provider.suspend(name=self.test_node_name)

tests\aws\test_cloud_aws.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
cloudmesh\mongo\DataBaseDecorator.py:87: in wrapper
    current = f(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <cloudmesh.compute.vm.Provider.Provider object at 0x000001A02BA60D48>
name = 'test1'

    @DatabaseUpdate()
    def suspend(self, name=None):
>       raise NotImplementedError
E       NotImplementedError

cloudmesh\compute\vm\Provider.py:380: NotImplementedError
___________________________ TestCloudAws.test_stop ____________________________

self = <test_cloud_aws.TestCloudAws object at 0x000001A02D306448>

    def test_stop(self):
        HEADING()
        self.provider.stop(name=self.test_node_name)
>       state = self._wait_and_get_state(self.test_node_name, 30)

tests\aws\test_cloud_aws.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_cloud_aws.TestCloudAws object at 0x000001A02D306448>
name = 'test1', how_long = 30

    def _wait_and_get_state(self, name, how_long=15):
        time.sleep(how_long)
>       node = self.provider.provider.driver._get_node(name)
E       AttributeError: 'Provider' object has no attribute 'provider'

tests\aws\test_cloud_aws.py:31: AttributeError
___________________________ TestCloudAws.test_start ___________________________

self = <test_cloud_aws.TestCloudAws object at 0x000001A02DB77D48>

    def test_start(self):
        HEADING()
        self.provider.start(name=self.test_node_name)
>       state = self._wait_and_get_state(self.test_node_name, 30)

tests\aws\test_cloud_aws.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <test_cloud_aws.TestCloudAws object at 0x000001A02DB77D48>
name = 'test1', how_long = 30

    def _wait_and_get_state(self, name, how_long=15):
        time.sleep(how_long)
>       node = self.provider.provider.driver._get_node(name)
E       AttributeError: 'Provider' object has no attribute 'provider'

tests\aws\test_cloud_aws.py:31: AttributeError
________________________ TestCloudAws.test_list_sizes _________________________

self = <test_cloud_aws.TestCloudAws object at 0x000001A02ED629C8>

    def test_list_sizes(self):
        HEADING()
>       vols = self.provider.provider.list_sizes()
E       AttributeError: 'Provider' object has no attribute 'provider'

tests\aws\test_cloud_aws.py:73: AttributeError
___________________________ TestCmsAWS.test_01_boot ___________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FEAC9C8>

    def test_01_boot(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            f"cms vm boot --name=test_boot_01 --cloud={CLOUD} --username=root"
            f" --image={IMAGE}"
            f" --flavor=t2.micro"
            f" --public --key={self.key} --dryrun", shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "create nodes ['test_boot_01']" in result
E       assert "create nodes ['test_boot_01']" in '# ----------------------------------------------------------------------\r\n# boot\r\n# -----------------------------...rname=root\r\n        flavor=t2.micro\r\n        key=aws_cert\r\n        secgroup=default\r\n        name=test_boot_01'

tests\aws\test_cms_aws.py:42: AssertionError
___________________________ TestCmsAWS.test_02_boot ___________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FE6E808>

    def test_02_boot(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            f"cms vm boot --n=2 --cloud={CLOUD} --username=root"
            f" --image={IMAGE}"
            f" --flavor=t2.micro --public --key={self.key} --dryrun",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "create nodes" in result
E       AssertionError: assert 'create nodes' in '# ----------------------------------------------------------------------\r\n# boot\r\n# -----------------------------...username=root\r\n        flavor=t2.micro\r\n        key=aws_cert\r\n        secgroup=default\r\n        name=brfunk-vm'

tests\aws\test_cms_aws.py:62: AssertionError
___________________________ TestCmsAWS.test_03_boot ___________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF4ACC8>

    def test_03_boot(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            f"cms vm boot --name=test_boot_01,test_boot_02 --cloud={CLOUD}"
            f" --username=root"
            f" --image={IMAGE}"
            f" --flavor=t2.micro --public --key={self.key}",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "cm.name" in result
E       assert 'cm.name' in '# ----------------------------------------------------------------------\r\n# Create Server\r\n# --------------------...nInstances operation: Invalid id: "ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212" (expecting "ami-...")'

tests\aws\test_cms_aws.py:83: AssertionError
___________________________ TestCmsAWS.test_04_boot ___________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF3D288>

    def test_04_boot(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            f"cms vm boot --n=2 --cloud={CLOUD} --username=root "
            f" --image={IMAGE}"
            f" --flavor=t2.micro --public --key={self.key}",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "cm.name" in result
E       assert 'cm.name' in '# ----------------------------------------------------------------------\r\n# Create Server\r\n# --------------------...nInstances operation: Invalid id: "ubuntuimageshvm-ssdubuntu-xenial-16.04-amd64-server-20190212" (expecting "ami-...")'

tests\aws\test_cms_aws.py:104: AssertionError
____________________________ TestCmsAWS.test_list _____________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FEBA948>

    def test_list(self):
        HEADING()
    
        Benchmark.Start()
        r1 = Shell.execute(
            f"cms vm list test_boot_01 --cloud={CLOUD} --output=table --refresh",
            shell=True)
        r2 = Shell.execute(
            f"cms vm list test_boot_01 --cloud={CLOUD} --output=table",
            shell=True)
        Benchmark.Stop()
    
>       assert r1 == r2
E       AssertionError: assert 'cloud aws\r\...-----+------+' == 'List aws\r\n...-----+------+'
E         - cloud aws
E         + List aws
E         - +--------------+-------+---------------------+---------+-----------------------+------------+---------------+---------------+----------------------+------+
E         + +--------------+-------+-------------------------+-------------+---------------------------+---------------+---------------+---------------+--------------------------+------+
E         ?                                              ++++ ++++                                 ++++ +++                                                                   ++++
E         - | Name         | Cloud | Instance ID         | S...
E         
E         ...Full output truncated (64 lines hidden), use '-vv' to show

tests\aws\test_cms_aws.py:124: AssertionError
___________________________ TestCmsAWS.test_status ____________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF42E88>

    def test_status(self):
        HEADING(
            "please patiently wait for vm to boot and proceed with other tests")
    
        # wait for vms to boot for further tests
        while 'pending' in Shell.execute("cms vm list test_boot_01 --refresh",
                                         shell=True):
            time.sleep(1)
    
        Benchmark.Start()
        result = Shell.execute(f"cms vm status test_boot_01 --cloud={CLOUD}",
                               shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "{'test_boot_01': 'running'}" in result
E       assert "{'test_boot_01': 'running'}" in "aws\r\nERROR: executing command 'vm status test_boot_01 --cloud=aws'\r\n=============================================...er']  # not pretty\r\nKeyError: 'status'\r\n\r\n======================================================================"

tests\aws\test_cms_aws.py:142: AssertionError
___________________________ TestCmsAWS.test_01_stop ___________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FEC1B88>

    def test_01_stop(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            f"cms vm stop test_boot_02 --cloud={CLOUD} --dryrun",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "stop nodes ['test_boot_02']" in result
E       assert "stop nodes ['test_boot_02']" in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:155: AssertionError
___________________________ TestCmsAWS.test_02_stop ___________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF639C8>

    def test_02_stop(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            f"cms vm stop test_boot_02 --cloud={CLOUD} --parallel --processors=3 --dryrun",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "stop nodes ['test_boot_02']" in result
E       assert "stop nodes ['test_boot_02']" in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:170: AssertionError
___________________________ TestCmsAWS.test_03_stop ___________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF4C488>

    def test_03_stop(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(f"cms vm stop test_boot_02 --cloud={CLOUD}",
                               shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "test_boot_02" in result
E       AssertionError: assert 'test_boot_02' in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:184: AssertionError
____________________________ TestCmsAWS.test_ping _____________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF57048>

    def test_ping(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            f"cms vm ping test_boot_01 --cloud={CLOUD} --count=3 --processors=3",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "ok" in result
E       AssertionError: assert 'ok' in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:197: AssertionError
____________________________ TestCmsAWS.test_check ____________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF4CE08>

    def test_check(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            f"cms vm check test_boot_01 --cloud={CLOUD} --username=ubuntu --processors=3",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "ok" in result
E       AssertionError: assert 'ok' in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:211: AssertionError
___________________________ TestCmsAWS.test_01_run ____________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF398C8>

    def test_01_run(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            "cms vm run --name=test_boot_01 --username=ubuntu --dryrun uname",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "run command uname on vms: ['test_boot_01']" in result
E       assert "run command uname on vms: ['test_boot_01']" in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:224: AssertionError
__________________________ TestCmsAWS.test_01_script __________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF4CF88>

    def test_01_script(self):
        HEADING()
    
        Benchmark.Start()
        #
        # TODO: location is a bug as we can not assum test is run in .
        # alos the sh command has been removed and should be created in this
        # test
        #
        result = Shell.execute(
            "cms vm script --name=test_boot_01 --username=ubuntu ./test_cms_aws.sh --dryrun",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "run script ./test_cms_aws.sh on vms: ['test_boot_01']" in result
E       assert "run script ./test_cms_aws.sh on vms: ['test_boot_01']" in "ERROR: executing command 'vm script --name=test_boot_01 --username=ubuntu ./test_cms_aws.sh --dryrun'\r\n============...tImplementedError\r\nNotImplementedError\r\n\r\n======================================================================"

tests\aws\test_cms_aws.py:253: AssertionError
__________________________ TestCmsAWS.test_01_start ___________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF42988>

    def test_01_start(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            f"cms vm start test_boot_02 --cloud={CLOUD} --dryrun",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "start nodes ['test_boot_02']" in result
E       assert "start nodes ['test_boot_02']" in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:277: AssertionError
__________________________ TestCmsAWS.test_02_start ___________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FEC1908>

    def test_02_start(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            "cms vm start test_boot_02 --parallel --processors=3 --dryrun",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "start nodes ['test_boot_02']" in result
E       assert "start nodes ['test_boot_02']" in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:292: AssertionError
________________________ TestCmsAWS.test_01_terminate _________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF618C8>

    def test_01_terminate(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute("cms vm delete test_boot_01 --dryrun",
                               shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "delete nodes ['test_boot_01']" in result
E       assert "delete nodes ['test_boot_01']" in ''

tests\aws\test_cms_aws.py:317: AssertionError
________________________ TestCmsAWS.test_02_terminate _________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF59B88>

    def test_02_terminate(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            "cms vm terminate test_boot_01 --parallel --processors=3 --dryrun",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "terminate nodes ['test_boot_01']" in result
E       assert "terminate nodes ['test_boot_01']" in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:332: AssertionError
________________________ TestCmsAWS.test_03_terminate _________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FEC6C48>

    def test_03_terminate(self):
        HEADING()
    
        while 'pending' in Shell.execute("cms vm list test_boot_01 --refresh",
                                         shell=True):
            time.sleep(1)
    
        Benchmark.Start()
        result = Shell.execute("cms vm terminate test_boot_01", shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "test_boot_01" in result
E       assert 'test_boot_01' in 'ec2.instancesCollection(ec2.ServiceResource(), ec2.Instance)\r\n\'NoneType\' object has no attribute \'items\'\r\nTra...", line 59, in flatten\r\n    for k, v in d.items():\r\nAttributeError: \'NoneType\' object has no attribute \'items\''

tests\aws\test_cms_aws.py:349: AssertionError
__________________________ TestCmsAWS.test_01_delete __________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF50288>

    def test_01_delete(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute("cms vm delete test_boot_02 --dryrun",
                               shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "delete nodes ['test_boot_02']" in result
E       assert "delete nodes ['test_boot_02']" in ''

tests\aws\test_cms_aws.py:361: AssertionError
__________________________ TestCmsAWS.test_02_delete __________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FF30948>

    def test_02_delete(self):
        HEADING()
    
        Benchmark.Start()
        result = Shell.execute(
            "cms vm delete test_boot_02 --parallel --processors=3 --dryrun",
            shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "delete nodes ['test_boot_02']" in result
E       assert "delete nodes ['test_boot_02']" in 'Usage:\r\n\r\n    vm ping [NAMES] [--cloud=CLOUDS] [--count=N]\r\n    vm check [NAMES] [--cloud=CLOUDS] [--username=U...size [NAMES] [--size=SIZE]\r\n\r\nERROR: Could not execute the command. Please check usage with\r\n\r\n    cms help vm'

tests\aws\test_cms_aws.py:376: AssertionError
__________________________ TestCmsAWS.test_03_delete __________________________

self = <test_cms_aws.TestCmsAWS object at 0x000001A02FEF07C8>

    def test_03_delete(self):
        HEADING()
    
        while 'pending' in Shell.execute("cms vm list test_boot_02 --refresh",
                                         shell=True):
            time.sleep(1)
    
        Benchmark.Start()
        result = Shell.execute("cms vm delete test_boot_02", shell=True)
        Benchmark.Stop()
    
        VERBOSE(result)
    
>       assert "test_boot_02" in result
E       AssertionError: assert 'test_boot_02' in ''

tests\aws\test_cms_aws.py:393: AssertionError
_________________________ Test_Vafa.test_aws_aws_boot _________________________

self = <test_vafa.Test_Vafa object at 0x000001A030842688>

    def test_aws_aws_boot(self):
        HEADING()
        name = Name()
        name.incr()
        vm_name = str(name)
        provider = Provider(name=CLOUD)
        vm = provider.create(name=vm_name, image="ami-0c929bde1796e1484",
>                            size="t2.micro")

tests\aws\test_vafa.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <cloudmesh.compute.aws.Provider.Provider object at 0x000001A030862948>
name = 'brfunk-vm', image = 'ami-0c929bde1796e1484', size = 't2.micro'
location = None, timeout = 360, key = None, secgroup = 'default', ip = None
user = None, public = None, group = None, metadata = None, kwargs = {}

    def create(self,
               name=None,
               image=None,
               size=None,
               location=None,
               timeout=360,
               key=None,
               secgroup=None,
               ip=None,
               user=None,
               public=None,
               group=None,
               metadata=None,
               **kwargs):
    
        """
        creates a named node
    
        :param name: the name of the node
        :param image: the image used
        :param size: the size of the image
        :param timeout: a timeout in seconds that is invoked in case the image
                        does not boot. The default is set to 3 minutes.
        :param kwargs: additional arguments passed along at time of boot
    
        :return: the list with the modified dicts
        """
        """
        create one node
        """
        if not ip and public:
            ip = self.find_available_public_ip()
        elif ip is not None:
            entry = self.list_public_ips(ip=ip, available=True)
            if len(entry) == 0:
                Console.error("ip not available")
            return None
    
        banner("Create Server")
        Console.msg(f"    Name:     {name}")
        Console.msg(f"    User:     {user}")
        Console.msg(f"    IP:       {ip}")
        Console.msg(f"    Image:    {image}")
        Console.msg(f"    Size:     {size}")
        Console.msg(f"    Public:   {public}")
        Console.msg(f"    Key:      {key}")
        Console.msg(f"    Location: {location}")
        Console.msg(f"    Timeout:  {timeout}")
        Console.msg(f"    Secgroup: {secgroup}")
        Console.msg(f"    Group:    {group}")
        # Console.msg(f"    Groups:   {groups}")
        Console.msg("")
    
        if secgroup is None:
            secgroup = 'default'
    
        if key is None:
>           raise ValueError("Key must be set. Use cms set key=<key name>")
E           ValueError: Key must be set. Use cms set key=<key name>

cloudmesh\compute\aws\Provider.py:1092: ValueError
============= 27 failed, 8 passed, 16 errors in 304.36s (0:05:04) =============
